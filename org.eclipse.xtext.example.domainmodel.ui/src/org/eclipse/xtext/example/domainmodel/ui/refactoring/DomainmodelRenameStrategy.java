/*
* generated by Xtext
*/
package org.eclipse.xtext.example.domainmodel.ui.refactoring;

import java.util.Set;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmField;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.example.domainmodel.domainmodel.Property;
import org.eclipse.xtext.ui.refactoring.IRenameStrategy;
import org.eclipse.xtext.ui.refactoring.impl.DefaultRenameStrategy;
import org.eclipse.xtext.ui.refactoring.ui.IRenameElementContext;
import org.eclipse.xtext.util.ITextRegion;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations;
import org.eclipse.xtext.xbase.ui.jvmmodel.refactoring.AbstractJvmModelRenameStrategy;

import com.google.inject.Inject;

/**
 * Encapsulates the model changes of a rename refactoring.
 */
public class DomainmodelRenameStrategy extends AbstractJvmModelRenameStrategy {

	public static class Provider extends DefaultRenameStrategy.Provider {

		@Inject
		private IJvmModelAssociations jvmModelAssociations;

		@Override
		public IRenameStrategy get(EObject targetElement, IRenameElementContext renameElementContext) {
			EAttribute nameAttribute = getNameAttribute(targetElement);
			return new DomainmodelRenameStrategy(targetElement, nameAttribute, getOriginalNameRegion(targetElement,
					nameAttribute), getNameRuleName(targetElement, nameAttribute), getValueConverterService(),
					jvmModelAssociations);
		}
	}

	protected DomainmodelRenameStrategy(EObject targetElement, EAttribute nameAttribute,
			ITextRegion originalNameRegion, String nameRuleName, IValueConverterService valueConverterService,
			IJvmModelAssociations jvmModelAssociations) {
		super(targetElement, nameAttribute, originalNameRegion, nameRuleName, valueConverterService,
				jvmModelAssociations);
	}

	@Override
	protected void setInferredJvmElementName(String name, EObject renamedSourceElement) {
		Set<EObject> jvmElements = getJvmModelAssociations().getJvmElements(renamedSourceElement);
		for (EObject jvmElement : jvmElements) {
			if (renamedSourceElement instanceof Property) {
				if (jvmElement instanceof JvmField) {
					((JvmField) jvmElement).setSimpleName(name);
				} else if (jvmElement instanceof JvmOperation) {
					JvmOperation operation = (JvmOperation) jvmElement;
					operation.setSimpleName(operation.getSimpleName().substring(0, 3) + Strings.toFirstUpper(name));
				}
			} else {
				if (jvmElement instanceof JvmMember) {
					((JvmMember) jvmElement).setSimpleName(name);
				}
			}
		}
	}
}
